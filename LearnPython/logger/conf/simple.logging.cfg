[loggers]
keys=root,simple
#-----------------------------------------------------------
# 实现上面定义的 logger 模块，必须是[logger_xxxx] 这样的形式
#-----------------------------------------------------------
# [logger_xxxx] logger 模块名称
# level 级别，级别有 DEBUG, INFO， WARNING, ERROR, CRITICAL
# handlers 处理类，可以有多个，用逗号分开，实现见第二部分
# qualname logger 名称，应用程序通过 logging.getLogger 获取。
#    对于不能获取的名称，则记录到 root 模块
# propagate 是否继承父类的 log 信息， 0:否 1: 是

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_simple]
level=DEBUG
handlers=TRFH_Hourly,TRFH_Error
qualname=simple
propagate=0

# 第二部分定义每个模块的 Handler 其中 rotateFileHandler 用来根据日志
# 文件大小进行切分，而 timerotateFileHandler 则根据时间进行切分
# ---------------------------------------------------------------
# handler
# ---------------------------------------------------------------
# [handler_xxxx]
# class handler 类名
# level 日志级别
# formatter 日志格式，见第三部分
# args handler 初始化函参数
[handlers]
keys=consoleHandler,TRFH_Hourly, TRFH_Error

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=pemakoFormatter
args=(sys.stdout,)

[handler_TRFH_Hourly]
class=logging.handlers.TimedRotatingFileHandler
level=DEBUG
formatter=pemakoFormatter
args=('logs/hourly/simple.log', 'H', 1, 168)

[handler_TRFH_Error]
class=logging.handlers.TimedRotatingFileHandler
level=WARN
formatter=pemakoFormatter
args=('logs/hourly/simple.error.log', 'D', 1, 168)

[formatters]
keys=pemakoFormatter

[formatter_pemakoFormatter]
# 格式化时间 日志级别 logger模块名称 执行程序名称 打印日志的当前函数 当前行号 线程id 日志信息
#format=%(asctime)s %(levelname)-7s %(name)s %(filename)-10s %(funcName)-8s %(lineno)-3d %(thread)d - %(message)s
format=%(asctime)s %(levelname)s %(name)s %(thread)d - %(message)s
datefmt=
